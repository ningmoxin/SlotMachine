
@page "/"
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Single Reel Slot Machine</h3>

<div class="slot-container">
    @if (symbols != null && symbols.Count > 0)
    {
        <div class="reel">
            <div class="reel-inner" id="reel">
                <!-- Duplicate symbols for animation effect -->
                @foreach (var symbol in symbols)
                {
                    <span>@symbol</span>
                }
                @foreach (var symbol in symbols)
                {
                    <span>@symbol</span>
                }
            </div>
        </div>
    }
</div>

<button @onclick="StartSpin" disabled="@(isSpinning)">Start</button>
<button @onclick="StopSpin" disabled="@(isStopped)">Stop</button>

@code {
    // List to hold the symbols
    private List<string>? symbols { get; set; }
    private bool isSpinning = false;
    private bool isStopped = true;

    protected override async Task OnInitializedAsync()
    {
        // Load symbols from the JSON file
        symbols = await LoadSymbolsFromJsonAsync();
    }

    // Method to load symbols from the JSON file
    private async Task<List<string>> LoadSymbolsFromJsonAsync()
    {
        try
        {
            // Read JSON file from wwwroot
            var response = await Http.GetFromJsonAsync<List<string>>(@"data\slots.json");
            return response ?? new List<string>();
        }
        catch (Exception ex)
        {
            // Handle any errors
            Console.WriteLine($"Error loading symbols: {ex.Message}");
            return new List<string>();
        }
    }

    private async Task StartSpin()
    {
        isSpinning = true;
        isStopped = false;
        // Start spinning the reel using JavaScript
        await JS.InvokeVoidAsync("startReelAnimation");
    }

    private async Task StopSpin()
    {
        isSpinning = false;
        isStopped = true;
        // Stop the spinning reel using JavaScript
        await JS.InvokeVoidAsync("stopReelAnimation", symbols!.Count);
    }
}

