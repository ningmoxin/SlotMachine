
@page "/"
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Single Reel Slot Machine</h3>
<!-- 增加音效或人聲選擇的 RadioButton -->
<div class="audio-options">
    <label>
        <input name="audio" type="radio" value="sound"/>
        音效
    </label>
    <label>
        <input name="audio" type="radio" value="voice" checked />
        人聲
    </label>
    <select id="voiceSelect">
        <option value="">請選擇語音</option>
    </select>
</div>
<!-- Slot 符號橫向清單 -->
<div class="symbol-container">
    @if (symbols != null)
    {
        @foreach (var symbol in symbols)
        {
            <div class="symbol-item">@symbol</div>
        }
    }
    else
    {
        <p>Loading symbols...</p>
    }
</div>
<div class="slot-container">
    @if (symbols != null && symbols.Count > 0)
    {
        <div class="reel">
            <div class="reel-inner" id="reel">
                <!-- Duplicate symbols for animation effect -->
                @foreach (var symbol in symbols)
                {
                    <span>@symbol</span>
                }
                @foreach (var symbol in symbols)
                {
                    <span>@symbol</span>
                }
            </div>
        </div>
    }
    <div style="margin:10px">
        <button class="btn" @onclick="Spin" disabled="@isSpinning">
            <span>@spinText</span>
        </button>
    </div>

    @if (resultHistory.Count > 0)
    {
        <div class="history-container">
            <h4>歷史結果：</h4>
            <ul>
                @foreach (var result in resultHistory)
                {
                    <li>@result</li>
                }
            </ul>
        </div>
    }
</div>



@code {
    // List to hold the symbols
    private List<string>? symbols { get; set; }
    private bool isSpinning = false;
    private bool isStopped = true;
    private string spinText = "Start";
    // JS引用，用於監聽 SlotFinal 事件
    private DotNetObjectReference<Slot> objRef;
    private List<string> resultHistory = new(); // 儲存歷史結果
    private string? currentResult;

    // 初始化方法
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerSlotFinalEvent", objRef); // 註冊 JS 事件監聽
            await JS.InvokeVoidAsync("initializeVoiceLoading");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        // Load symbols from the JSON file
        symbols = await LoadSymbolsFromJsonAsync();
    }

    // Method to load symbols from the JSON file
    private async Task<List<string>> LoadSymbolsFromJsonAsync()
    {
        try
        {
            // Read JSON file from wwwroot
            var response = await Http.GetFromJsonAsync<List<string>>(@"data\slots.json");
            return response ?? new List<string>();
        }
        catch (Exception ex)
        {
            // Handle any errors
            Console.WriteLine($"Error loading symbols: {ex.Message}");
            return new List<string>();
        }
    }


    private async Task Spin()
    {
        if (isStopped)
        {
            isSpinning = true;
            isStopped = false;
            spinText = "Stop"; // 更改按鈕文本為 "Stop"
                               // Start spinning the reel using JavaScript
            await JS.InvokeVoidAsync("startReelAnimation");
            Func<Task> workItem = async () =>
                        {
                            await Task.Delay(300); // 可以根據需求設置延遲時間
                            isSpinning = false; // 啟動後解禁按鈕
                            StateHasChanged(); // 強制刷新 UI 狀態
                        };
            await InvokeAsync(workItem);
        }
        else
        {
            isSpinning = true;
            isStopped = true;
            spinText = "Start"; // 更改按鈕文本為 "Stop"
                                // Stop the spinning reel using JavaScript
            await JS.InvokeVoidAsync("stopReelAnimation", symbols!.Count);
        }
    }

    // Blazor 中的回調方法，用於監聽 JS 事件 SlotFinal
    [JSInvokable]
    public void OnSlotFinal(string symbol)
    {
        // 當 SlotFinal 事件觸發時，啟用按鈕
        isSpinning = false;
        resultHistory.Insert(0, symbol); // 新結果放前面
        StateHasChanged(); // 更新 UI 狀態
        Console.WriteLine("Slot Machine Final Event Triggered.");
    }

    // 釋放資源
    public void Dispose()
    {
        objRef?.Dispose();
    }
}

